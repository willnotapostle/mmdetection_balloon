{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/train.json',\n        img_prefix='data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/HOME/scz0ap1/run/mmdetection/checkpoints/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'work_dirs/mask_rcnn_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1915931598, "exp_name": "mask_rcnn_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.001, "bbox_mAP": 0.0399, "bbox_mAP_50": 0.0911, "bbox_mAP_75": 0.0323, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0646, "bbox_mAP_l": 0.0429, "bbox_mAP_copypaste": "0.0399 0.0911 0.0323 0.0000 0.0646 0.0429", "segm_mAP": 0.0568, "segm_mAP_50": 0.0972, "segm_mAP_75": 0.0594, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0597, "segm_mAP_l": 0.068, "segm_mAP_copypaste": "0.0568 0.0972 0.0594 0.0000 0.0597 0.0680"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.001, "bbox_mAP": 0.1465, "bbox_mAP_50": 0.3454, "bbox_mAP_75": 0.1148, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1618, "bbox_mAP_l": 0.1595, "bbox_mAP_copypaste": "0.1465 0.3454 0.1148 0.0000 0.1618 0.1595", "segm_mAP": 0.1973, "segm_mAP_50": 0.3819, "segm_mAP_75": 0.1822, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1087, "segm_mAP_l": 0.2472, "segm_mAP_copypaste": "0.1973 0.3819 0.1822 0.0000 0.1087 0.2472"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.001, "bbox_mAP": 0.2341, "bbox_mAP_50": 0.5164, "bbox_mAP_75": 0.184, "bbox_mAP_s": 0.0189, "bbox_mAP_m": 0.1551, "bbox_mAP_l": 0.2803, "bbox_mAP_copypaste": "0.2341 0.5164 0.1840 0.0189 0.1551 0.2803", "segm_mAP": 0.3256, "segm_mAP_50": 0.5096, "segm_mAP_75": 0.3309, "segm_mAP_s": 0.005, "segm_mAP_m": 0.1374, "segm_mAP_l": 0.3975, "segm_mAP_copypaste": "0.3256 0.5096 0.3309 0.0050 0.1374 0.3975"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.001, "bbox_mAP": 0.299, "bbox_mAP_50": 0.5678, "bbox_mAP_75": 0.2421, "bbox_mAP_s": 0.0202, "bbox_mAP_m": 0.1719, "bbox_mAP_l": 0.3717, "bbox_mAP_copypaste": "0.2990 0.5678 0.2421 0.0202 0.1719 0.3717", "segm_mAP": 0.4053, "segm_mAP_50": 0.5527, "segm_mAP_75": 0.4818, "segm_mAP_s": 0.0106, "segm_mAP_m": 0.1622, "segm_mAP_l": 0.5058, "segm_mAP_copypaste": "0.4053 0.5527 0.4818 0.0106 0.1622 0.5058"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.001, "bbox_mAP": 0.3942, "bbox_mAP_50": 0.6233, "bbox_mAP_75": 0.4725, "bbox_mAP_s": 0.0303, "bbox_mAP_m": 0.2182, "bbox_mAP_l": 0.4791, "bbox_mAP_copypaste": "0.3942 0.6233 0.4725 0.0303 0.2182 0.4791", "segm_mAP": 0.5104, "segm_mAP_50": 0.622, "segm_mAP_75": 0.5996, "segm_mAP_s": 0.0092, "segm_mAP_m": 0.2549, "segm_mAP_l": 0.6191, "segm_mAP_copypaste": "0.5104 0.6220 0.5996 0.0092 0.2549 0.6191"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.001, "bbox_mAP": 0.4767, "bbox_mAP_50": 0.7048, "bbox_mAP_75": 0.5681, "bbox_mAP_s": 0.0673, "bbox_mAP_m": 0.2455, "bbox_mAP_l": 0.5761, "bbox_mAP_copypaste": "0.4767 0.7048 0.5681 0.0673 0.2455 0.5761", "segm_mAP": 0.595, "segm_mAP_50": 0.7094, "segm_mAP_75": 0.6968, "segm_mAP_s": 0.0087, "segm_mAP_m": 0.3304, "segm_mAP_l": 0.7077, "segm_mAP_copypaste": "0.5950 0.7094 0.6968 0.0087 0.3304 0.7077"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5163, "bbox_mAP_50": 0.7422, "bbox_mAP_75": 0.622, "bbox_mAP_s": 0.0404, "bbox_mAP_m": 0.273, "bbox_mAP_l": 0.6191, "bbox_mAP_copypaste": "0.5163 0.7422 0.6220 0.0404 0.2730 0.6191", "segm_mAP": 0.6476, "segm_mAP_50": 0.746, "segm_mAP_75": 0.7382, "segm_mAP_s": 0.0087, "segm_mAP_m": 0.3595, "segm_mAP_l": 0.7642, "segm_mAP_copypaste": "0.6476 0.7460 0.7382 0.0087 0.3595 0.7642"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5459, "bbox_mAP_50": 0.7634, "bbox_mAP_75": 0.6626, "bbox_mAP_s": 0.0316, "bbox_mAP_m": 0.3358, "bbox_mAP_l": 0.6402, "bbox_mAP_copypaste": "0.5459 0.7634 0.6626 0.0316 0.3358 0.6402", "segm_mAP": 0.6682, "segm_mAP_50": 0.7613, "segm_mAP_75": 0.7559, "segm_mAP_s": 0.011, "segm_mAP_m": 0.4133, "segm_mAP_l": 0.7763, "segm_mAP_copypaste": "0.6682 0.7613 0.7559 0.0110 0.4133 0.7763"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5067, "bbox_mAP_50": 0.7805, "bbox_mAP_75": 0.639, "bbox_mAP_s": 0.0289, "bbox_mAP_m": 0.3432, "bbox_mAP_l": 0.5863, "bbox_mAP_copypaste": "0.5067 0.7805 0.6390 0.0289 0.3432 0.5863", "segm_mAP": 0.675, "segm_mAP_50": 0.7778, "segm_mAP_75": 0.7678, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.4746, "segm_mAP_l": 0.7717, "segm_mAP_copypaste": "0.6750 0.7778 0.7678 0.0168 0.4746 0.7717"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5463, "bbox_mAP_50": 0.7938, "bbox_mAP_75": 0.6684, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.3085, "bbox_mAP_l": 0.6379, "bbox_mAP_copypaste": "0.5463 0.7938 0.6684 0.1010 0.3085 0.6379", "segm_mAP": 0.691, "segm_mAP_50": 0.791, "segm_mAP_75": 0.7784, "segm_mAP_s": 0.0449, "segm_mAP_m": 0.4497, "segm_mAP_l": 0.789, "segm_mAP_copypaste": "0.6910 0.7910 0.7784 0.0449 0.4497 0.7890"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6038, "bbox_mAP_50": 0.8058, "bbox_mAP_75": 0.758, "bbox_mAP_s": 0.0884, "bbox_mAP_m": 0.4019, "bbox_mAP_l": 0.6825, "bbox_mAP_copypaste": "0.6038 0.8058 0.7580 0.0884 0.4019 0.6825", "segm_mAP": 0.7146, "segm_mAP_50": 0.8058, "segm_mAP_75": 0.7966, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.4651, "segm_mAP_l": 0.8077, "segm_mAP_copypaste": "0.7146 0.8058 0.7966 0.0337 0.4651 0.8077"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6235, "bbox_mAP_50": 0.8303, "bbox_mAP_75": 0.7734, "bbox_mAP_s": 0.0884, "bbox_mAP_m": 0.508, "bbox_mAP_l": 0.6876, "bbox_mAP_copypaste": "0.6235 0.8303 0.7734 0.0884 0.5080 0.6876", "segm_mAP": 0.7237, "segm_mAP_50": 0.8261, "segm_mAP_75": 0.8155, "segm_mAP_s": 0.0442, "segm_mAP_m": 0.5221, "segm_mAP_l": 0.8065, "segm_mAP_copypaste": "0.7237 0.8261 0.8155 0.0442 0.5221 0.8065"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.001, "bbox_mAP": 0.662, "bbox_mAP_50": 0.83, "bbox_mAP_75": 0.7896, "bbox_mAP_s": 0.1178, "bbox_mAP_m": 0.4816, "bbox_mAP_l": 0.7425, "bbox_mAP_copypaste": "0.6620 0.8300 0.7896 0.1178 0.4816 0.7425", "segm_mAP": 0.7402, "segm_mAP_50": 0.8243, "segm_mAP_75": 0.8112, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.5038, "segm_mAP_l": 0.8319, "segm_mAP_copypaste": "0.7402 0.8243 0.8112 0.0505 0.5038 0.8319"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6809, "bbox_mAP_50": 0.8378, "bbox_mAP_75": 0.7775, "bbox_mAP_s": 0.0884, "bbox_mAP_m": 0.4947, "bbox_mAP_l": 0.7577, "bbox_mAP_copypaste": "0.6809 0.8378 0.7775 0.0884 0.4947 0.7577", "segm_mAP": 0.7481, "segm_mAP_50": 0.8322, "segm_mAP_75": 0.8322, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.5137, "segm_mAP_l": 0.8354, "segm_mAP_copypaste": "0.7481 0.8322 0.8322 0.0505 0.5137 0.8354"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7016, "bbox_mAP_50": 0.8455, "bbox_mAP_75": 0.7786, "bbox_mAP_s": 0.0808, "bbox_mAP_m": 0.4982, "bbox_mAP_l": 0.7818, "bbox_mAP_copypaste": "0.7016 0.8455 0.7786 0.0808 0.4982 0.7818", "segm_mAP": 0.7611, "segm_mAP_50": 0.8365, "segm_mAP_75": 0.8309, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.5298, "segm_mAP_l": 0.846, "segm_mAP_copypaste": "0.7611 0.8365 0.8309 0.0505 0.5298 0.8460"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7052, "bbox_mAP_50": 0.8495, "bbox_mAP_75": 0.7812, "bbox_mAP_s": 0.0808, "bbox_mAP_m": 0.4914, "bbox_mAP_l": 0.7847, "bbox_mAP_copypaste": "0.7052 0.8495 0.7812 0.0808 0.4914 0.7847", "segm_mAP": 0.7668, "segm_mAP_50": 0.8427, "segm_mAP_75": 0.8361, "segm_mAP_s": 0.0442, "segm_mAP_m": 0.5299, "segm_mAP_l": 0.8514, "segm_mAP_copypaste": "0.7668 0.8427 0.8361 0.0442 0.5299 0.8514"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.001, "bbox_mAP": 0.709, "bbox_mAP_50": 0.8513, "bbox_mAP_75": 0.8074, "bbox_mAP_s": 0.0808, "bbox_mAP_m": 0.5044, "bbox_mAP_l": 0.7879, "bbox_mAP_copypaste": "0.7090 0.8513 0.8074 0.0808 0.5044 0.7879", "segm_mAP": 0.7712, "segm_mAP_50": 0.8431, "segm_mAP_75": 0.8431, "segm_mAP_s": 0.0442, "segm_mAP_m": 0.5515, "segm_mAP_l": 0.8535, "segm_mAP_copypaste": "0.7712 0.8431 0.8431 0.0442 0.5515 0.8535"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7093, "bbox_mAP_50": 0.8502, "bbox_mAP_75": 0.8049, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5195, "bbox_mAP_l": 0.7842, "bbox_mAP_copypaste": "0.7093 0.8502 0.8049 0.1010 0.5195 0.7842", "segm_mAP": 0.7625, "segm_mAP_50": 0.8408, "segm_mAP_75": 0.8408, "segm_mAP_s": 0.0577, "segm_mAP_m": 0.5338, "segm_mAP_l": 0.8445, "segm_mAP_copypaste": "0.7625 0.8408 0.8408 0.0577 0.5338 0.8445"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7219, "bbox_mAP_50": 0.8569, "bbox_mAP_75": 0.8417, "bbox_mAP_s": 0.0884, "bbox_mAP_m": 0.5117, "bbox_mAP_l": 0.8027, "bbox_mAP_copypaste": "0.7219 0.8569 0.8417 0.0884 0.5117 0.8027", "segm_mAP": 0.7707, "segm_mAP_50": 0.8476, "segm_mAP_75": 0.843, "segm_mAP_s": 0.0577, "segm_mAP_m": 0.5359, "segm_mAP_l": 0.8525, "segm_mAP_copypaste": "0.7707 0.8476 0.8430 0.0577 0.5359 0.8525"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7261, "bbox_mAP_50": 0.8581, "bbox_mAP_75": 0.8218, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5144, "bbox_mAP_l": 0.8037, "bbox_mAP_copypaste": "0.7261 0.8581 0.8218 0.1010 0.5144 0.8037", "segm_mAP": 0.7747, "segm_mAP_50": 0.8482, "segm_mAP_75": 0.8431, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.5322, "segm_mAP_l": 0.8578, "segm_mAP_copypaste": "0.7747 0.8482 0.8431 0.0673 0.5322 0.8578"}
